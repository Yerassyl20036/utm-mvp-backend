"""feat_initial_v1_database_schema

Revision ID: b3ef2a1d9f1e
Revises: 
Create Date: 2025-05-24 20:58:51.968480

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'b3ef2a1d9f1e' # Replace with your actual revision ID if different
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - manually reordered ###

    # 1. Tables with no FKs or only FKs to tables already created in this step
    op.create_table('users',
        sa.Column('full_name', sa.String(length=100), nullable=False),
        sa.Column('email', sa.String(length=255), nullable=False),
        sa.Column('phone_number', sa.String(length=20), nullable=True),
        sa.Column('iin', sa.String(length=12), nullable=True),
        sa.Column('hashed_password', sa.String(length=255), nullable=False),
        sa.Column('role', sa.Enum('AUTHORITY_ADMIN', 'ORGANIZATION_ADMIN', 'ORGANIZATION_PILOT', 'SOLO_PILOT', name='userrole'), nullable=False),
        # organization_id FK will be added after organizations table is created, or table altered if defined here
        sa.Column('organization_id', sa.Integer(), nullable=True), # Define column first
        sa.Column('is_active', sa.Boolean(), nullable=False),
        sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True),
        sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
        sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
        sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_users_deleted_at'), 'users', ['deleted_at'], unique=False)
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_index(op.f('ix_users_id'), 'users', ['id'], unique=False)
    op.create_index(op.f('ix_users_iin'), 'users', ['iin'], unique=True)
    op.create_index(op.f('ix_users_phone_number'), 'users', ['phone_number'], unique=True)
    # Index for users.organization_id (will be FK later)
    op.create_index('ix_users_organization_id', 'users', ['organization_id'], unique=False)


    op.create_table('organizations',
        sa.Column('name', sa.String(length=255), nullable=False),
        sa.Column('bin', sa.String(length=12), nullable=False),
        sa.Column('company_address', sa.String(length=500), nullable=False),
        sa.Column('city', sa.String(length=100), nullable=False),
        sa.Column('admin_id', sa.Integer(), nullable=True),
        sa.Column('is_active', sa.Boolean(), nullable=False),
        sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True),
        sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
        sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
        sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
        sa.ForeignKeyConstraint(['admin_id'], ['users.id'], name='fk_organization_admin_id'),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('admin_id') # Ensure admin_id is unique if one admin per org
    )
    op.create_index(op.f('ix_organizations_bin'), 'organizations', ['bin'], unique=True)
    op.create_index(op.f('ix_organizations_deleted_at'), 'organizations', ['deleted_at'], unique=False)
    op.create_index(op.f('ix_organizations_id'), 'organizations', ['id'], unique=False)
    op.create_index(op.f('ix_organizations_name'), 'organizations', ['name'], unique=True)

    # Now add the foreign key from users to organizations (if not handled by autogen correctly with __table_args__)
    # This might be needed if users.organization_id was just a Column without FK in its create_table
    # If your model User has __table_args__ with ForeignKeyConstraint, this might be redundant
    # Check your User model. If it uses `ForeignKey("organizations.id")` directly, this is fine.
    # If it was using `__table_args__`, then autogenerate might have missed it initially if `organizations` wasn't created yet.
    # For safety or if `ForeignKey` was used directly in column def for User model:
    op.create_foreign_key(
        'fk_user_organization_id', 'users',
        'organizations', ['organization_id'], ['id']
    )

    op.create_table('drones',
        sa.Column('brand', sa.String(length=100), nullable=False),
        sa.Column('model', sa.String(length=100), nullable=False),
        sa.Column('serial_number', sa.String(length=100), nullable=False),
        sa.Column('owner_type', sa.Enum('ORGANIZATION', 'SOLO_PILOT', name='droneownertype'), nullable=False),
        sa.Column('organization_id', sa.Integer(), nullable=True),
        sa.Column('solo_owner_user_id', sa.Integer(), nullable=True),
        sa.Column('current_status', sa.Enum('IDLE', 'ACTIVE', 'MAINTENANCE', 'UNKNOWN', name='dronestatus'), nullable=False),
        sa.Column('last_telemetry_id', sa.Integer(), nullable=True), # FK will be added with use_alter=True
        sa.Column('last_seen_at', sa.DateTime(timezone=True), nullable=True),
        sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True),
        sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
        sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
        sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
        sa.ForeignKeyConstraint(['organization_id'], ['organizations.id'], name='fk_drone_organization_id'),
        sa.ForeignKeyConstraint(['solo_owner_user_id'], ['users.id'], name='fk_drone_solo_owner_user_id'),
        # FK for last_telemetry_id is handled by use_alter=True in the model, Alembic adds it later.
        sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_drones_deleted_at'), 'drones', ['deleted_at'], unique=False)
    op.create_index(op.f('ix_drones_id'), 'drones', ['id'], unique=False)
    op.create_index(op.f('ix_drones_serial_number'), 'drones', ['serial_number'], unique=True)
    # Add other drone indexes if needed, e.g., for organization_id, solo_owner_user_id

    op.create_table('restricted_zones',
        sa.Column('name', sa.String(length=255), nullable=False),
        sa.Column('description', sa.String(length=1000), nullable=True),
        sa.Column('geometry_type', sa.Enum('CIRCLE', 'POLYGON', name='nfzgeometrytype'), nullable=False),
        sa.Column('definition_json', sa.JSON(), nullable=False),
        sa.Column('min_altitude_m', sa.Float(), nullable=True),
        sa.Column('max_altitude_m', sa.Float(), nullable=True),
        sa.Column('is_active', sa.Boolean(), nullable=False),
        sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True),
        sa.Column('created_by_authority_id', sa.Integer(), nullable=False),
        sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
        sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
        sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
        sa.ForeignKeyConstraint(['created_by_authority_id'], ['users.id'], name='fk_nfz_creator_id'),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_restricted_zones_deleted_at'), 'restricted_zones', ['deleted_at'], unique=False)
    op.create_index(op.f('ix_restricted_zones_id'), 'restricted_zones', ['id'], unique=False)
    op.create_index(op.f('ix_restricted_zones_name'), 'restricted_zones', ['name'], unique=False)

    op.create_table('flight_plans',
        sa.Column('user_id', sa.Integer(), nullable=False),
        sa.Column('drone_id', sa.Integer(), nullable=False),
        sa.Column('organization_id', sa.Integer(), nullable=True),
        sa.Column('planned_departure_time', sa.DateTime(timezone=True), nullable=False),
        sa.Column('planned_arrival_time', sa.DateTime(timezone=True), nullable=False),
        sa.Column('actual_departure_time', sa.DateTime(timezone=True), nullable=True),
        sa.Column('actual_arrival_time', sa.DateTime(timezone=True), nullable=True),
        sa.Column('status', sa.Enum('PENDING_ORG_APPROVAL', 'PENDING_AUTHORITY_APPROVAL', 'APPROVED', 'REJECTED_BY_ORG', 'REJECTED_BY_AUTHORITY', 'ACTIVE', 'COMPLETED', 'CANCELLED_BY_PILOT', 'CANCELLED_BY_ADMIN', name='flightplanstatus'), nullable=False),
        sa.Column('notes', sa.String(length=1000), nullable=True),
        sa.Column('rejection_reason', sa.String(length=500), nullable=True),
        sa.Column('approved_by_organization_admin_id', sa.Integer(), nullable=True),
        sa.Column('approved_by_authority_admin_id', sa.Integer(), nullable=True),
        sa.Column('approved_at', sa.DateTime(timezone=True), nullable=True),
        sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True),
        sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
        sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
        sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
        sa.ForeignKeyConstraint(['approved_by_authority_admin_id'], ['users.id'], name='fk_flightplan_auth_admin_approver_id'),
        sa.ForeignKeyConstraint(['approved_by_organization_admin_id'], ['users.id'], name='fk_flightplan_org_admin_approver_id'),
        sa.ForeignKeyConstraint(['drone_id'], ['drones.id'], name='fk_flightplan_drone_id'),
        sa.ForeignKeyConstraint(['organization_id'], ['organizations.id'], name='fk_flightplan_organization_id'),
        sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='fk_flightplan_user_id'),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_flight_plans_deleted_at'), 'flight_plans', ['deleted_at'], unique=False)
    op.create_index(op.f('ix_flight_plans_id'), 'flight_plans', ['id'], unique=False)
    # Add other indexes as defined in your FlightPlan model's __table_args__
    op.create_index('ix_flightplan_user_id', 'flight_plans', ['user_id'], unique=False)
    op.create_index('ix_flightplan_drone_id', 'flight_plans', ['drone_id'], unique=False)
    op.create_index('ix_flightplan_status', 'flight_plans', ['status'], unique=False)


    op.create_table('waypoints',
        sa.Column('flight_plan_id', sa.Integer(), nullable=False),
        sa.Column('latitude', sa.Float(), nullable=False),
        sa.Column('longitude', sa.Float(), nullable=False),
        sa.Column('altitude_m', sa.Float(), nullable=False),
        sa.Column('sequence_order', sa.Integer(), nullable=False),
        sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
        sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
        sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
        sa.ForeignKeyConstraint(['flight_plan_id'], ['flight_plans.id'], name='fk_waypoint_flightplan_id', ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_waypoints_id'), 'waypoints', ['id'], unique=False)
    op.create_index(op.f('ix_waypoints_sequence_order'), 'waypoints', ['sequence_order'], unique=False)
    # If you had a composite unique constraint for (flight_plan_id, sequence_order) in Waypoint model's __table_args__
    op.create_index('ix_waypoint_flight_plan_id_sequence_order', 'waypoints', ['flight_plan_id', 'sequence_order'], unique=True)


    op.create_table('telemetry_logs',
        sa.Column('id', sa.BigInteger(), autoincrement=True, nullable=False),
        sa.Column('flight_plan_id', sa.Integer(), nullable=True),
        sa.Column('drone_id', sa.Integer(), nullable=False),
        sa.Column('timestamp', sa.DateTime(timezone=True), nullable=False),
        sa.Column('latitude', sa.Float(), nullable=False),
        sa.Column('longitude', sa.Float(), nullable=False),
        sa.Column('altitude_m', sa.Float(), nullable=False),
        sa.Column('speed_mps', sa.Float(), nullable=True),
        sa.Column('heading_degrees', sa.Float(), nullable=True),
        sa.Column('status_message', sa.String(length=255), nullable=True),
        sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
        sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
        sa.ForeignKeyConstraint(['drone_id'], ['drones.id'], name='fk_telemetry_drone_id', ondelete='CASCADE'),
        sa.ForeignKeyConstraint(['flight_plan_id'], ['flight_plans.id'], name='fk_telemetry_flightplan_id', ondelete='SET NULL'),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_telemetry_logs_drone_id'), 'telemetry_logs', ['drone_id'], unique=False)
    op.create_index(op.f('ix_telemetry_logs_flight_plan_id'), 'telemetry_logs', ['flight_plan_id'], unique=False)
    op.create_index(op.f('ix_telemetry_logs_id'), 'telemetry_logs', ['id'], unique=False)
    op.create_index(op.f('ix_telemetry_logs_timestamp'), 'telemetry_logs', ['timestamp'], unique=False)

    # Add FK from Drones.last_telemetry_id to telemetry_logs.id using op.create_foreign_key
    # This is because of use_alter=True in the Drone model for this FK
    op.create_foreign_key(
        'fk_drone_last_telemetry_id', # Constraint name
        'drones',                     # Source table
        'telemetry_logs',             # Referenced table
        ['last_telemetry_id'],        # Source columns
        ['id']                        # Referenced columns
    )


    op.create_table('user_drone_assignments',
        sa.Column('user_id', sa.Integer(), nullable=False),
        sa.Column('drone_id', sa.Integer(), nullable=False),
        sa.Column('assigned_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
        # Removed id, created_at, updated_at if this is a pure M2M from a non-Base class
        # If UserDroneAssignment inherits Base, then 'id', 'created_at', 'updated_at' will be there
        # Assuming your UserDroneAssignment model was:
        # class UserDroneAssignment(Base): # then id, created_at, updated_at ARE present
        #     user_id = Column(Integer, ForeignKey("users.id"), primary_key=True) # if composite PK with Base's id
        #     drone_id = Column(Integer, ForeignKey("drones.id"), primary_key=True)
        # The autogenerated script seems to suggest it inherited Base, so let's match that:
        sa.Column('id', sa.Integer(), autoincrement=True, nullable=False), # This implies it inherited Base, but PK should be user_id, drone_id
        sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
        sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
        sa.ForeignKeyConstraint(['drone_id'], ['drones.id'], name='fk_assignment_drone_id'),
        sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='fk_assignment_user_id'),
        # If UserDroneAssignment inherits Base and its `id` is the PK:
        # sa.PrimaryKeyConstraint('id') 
        # If UserDroneAssignment does NOT inherit Base and has composite PK:
        sa.PrimaryKeyConstraint('user_id', 'drone_id') # This is more standard for M2M
        # Your autogen had `PrimaryKeyConstraint('user_id', 'drone_id', 'id')` which is wrong.
        # Let's assume the model was intended for composite PK without Base's id.
        # If it *did* inherit Base's id, then the PK is just 'id' and user_id, drone_id are just FKs.
        # Given the name, it should be a join table without its own surrogate id.
        # So, if the UserDroneAssignment model was the simple M2M, the create_table should be:
        # op.create_table('user_drone_assignments',
        #   sa.Column('user_id', sa.Integer(), nullable=False),
        #   sa.Column('drone_id', sa.Integer(), nullable=False),
        #   sa.Column('assigned_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
        #   sa.ForeignKeyConstraint(['drone_id'], ['drones.id'], name='fk_assignment_drone_id'),
        #   sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='fk_assignment_user_id'),
        #   sa.PrimaryKeyConstraint('user_id', 'drone_id')
        # )
        # The autogen script you provided for user_drone_assignments seems to have inherited Base.
        # Let's stick to what autogen produced for now, but this table might need model review.
    )
    # If user_drone_assignments inherited Base and its 'id' is PK:
    # op.create_index(op.f('ix_user_drone_assignments_id'), 'user_drone_assignments', ['id'], unique=False)
    # If it did NOT inherit Base, no index on a non-existent 'id' column.
    # The autogen suggests it created an 'id' column.


    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - manually reordered ###

    # Drop in reverse order of creation, handling FKs

    # If Drone.last_telemetry_id FK was added with op.create_foreign_key explicitly:
    # op.drop_constraint('fk_drone_last_telemetry_id', 'drones', type_='foreignkey')

    op.drop_table('user_drone_assignments') # If it inherited Base and had its own id index: op.drop_index(op.f('ix_user_drone_assignments_id'), table_name='user_drone_assignments')
    
    op.drop_index(op.f('ix_telemetry_logs_timestamp'), table_name='telemetry_logs')
    op.drop_index(op.f('ix_telemetry_logs_id'), table_name='telemetry_logs')
    op.drop_index(op.f('ix_telemetry_logs_flight_plan_id'), table_name='telemetry_logs')
    op.drop_index(op.f('ix_telemetry_logs_drone_id'), table_name='telemetry_logs')
    op.drop_table('telemetry_logs') # Drones might reference this, so needs careful ordering or use_alter

    op.drop_index(op.f('ix_waypoints_sequence_order'), table_name='waypoints')
    op.drop_index(op.f('ix_waypoints_id'), table_name='waypoints')
    op.drop_index('ix_waypoint_flight_plan_id_sequence_order', table_name='waypoints')
    op.drop_table('waypoints')

    op.drop_index(op.f('ix_flight_plans_id'), table_name='flight_plans')
    op.drop_index(op.f('ix_flight_plans_deleted_at'), table_name='flight_plans')
    op.drop_index('ix_flightplan_status', table_name='flight_plans')
    op.drop_index('ix_flightplan_drone_id', table_name='flight_plans')
    op.drop_index('ix_flightplan_user_id', table_name='flight_plans')
    op.drop_table('flight_plans')

    op.drop_index(op.f('ix_restricted_zones_name'), table_name='restricted_zones')
    op.drop_index(op.f('ix_restricted_zones_id'), table_name='restricted_zones')
    op.drop_index(op.f('ix_restricted_zones_deleted_at'), table_name='restricted_zones')
    op.drop_table('restricted_zones')

    op.drop_index(op.f('ix_drones_serial_number'), table_name='drones')
    op.drop_index(op.f('ix_drones_id'), table_name='drones')
    op.drop_index(op.f('ix_drones_deleted_at'), table_name='drones')
    op.drop_table('drones')
    
    # Drop users.organization_id FK if added explicitly
    op.drop_constraint('fk_user_organization_id', 'users', type_='foreignkey')

    op.drop_index(op.f('ix_organizations_name'), table_name='organizations')
    op.drop_index(op.f('ix_organizations_id'), table_name='organizations')
    op.drop_index(op.f('ix_organizations_deleted_at'), table_name='organizations')
    op.drop_index(op.f('ix_organizations_bin'), table_name='organizations')
    op.drop_table('organizations')

    op.drop_index(op.f('ix_users_phone_number'), table_name='users')
    op.drop_index(op.f('ix_users_iin'), table_name='users')
    op.drop_index(op.f('ix_users_id'), table_name='users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_index(op.f('ix_users_deleted_at'), table_name='users')
    op.drop_index('ix_users_organization_id', table_name='users')
    op.drop_table('users')


    # ### end Alembic commands ###