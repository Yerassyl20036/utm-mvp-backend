version: '3.8'

services:
  db:
    image: postgres:15-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-utmadmin}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-securepassword}
      POSTGRES_DB: ${POSTGRES_DB:-utmdb}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-utmadmin} -d ${POSTGRES_DB:-utmdb}"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # backend:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile
  #   volumes:
  #     - .:/app  # Mount the entire project for development
  #   ports:
  #     - "8000:8000"
  #   environment:
  #     # Pass all necessary env vars from backend/.env
  #     # For simplicity, you can list them here or use `env_file`
  #     # but ensure SECRET_KEY is set securely if committing this file (better to use .env)
  #     PROJECT_NAME: ${PROJECT_NAME:-UTM MVP}
  #     POSTGRES_SERVER: db # Service name from this docker-compose file
  #     POSTGRES_USER: ${POSTGRES_USER:-utmadmin}
  #     POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-securepassword}
  #     POSTGRES_DB: ${POSTGRES_DB:-utmdb}
  #     POSTGRES_PORT: 5432 # Port inside the docker network
  #     SECRET_KEY: ${SECRET_KEY:-your-super-secret-key-that-is-at-least-32-bytes-long} # CHANGE THIS!
  #     ALGORITHM: ${ALGORITHM:-HS256}
  #     ACCESS_TOKEN_EXPIRE_MINUTES: ${ACCESS_TOKEN_EXPIRE_MINUTES:-30}
  #     BACKEND_CORS_ORIGINS: ${BACKEND_CORS_ORIGINS:-'["http://localhost:5173", "http://127.0.0.1:5173", "http://localhost:3000", "http://127.0.0.1:3000"]'}
  #   depends_on:
  #     db:
  #       condition: service_healthy
  #   env_file:
  #     - .env
  #   restart: unless-stopped
  #   healthcheck:
  #     test: ["CMD", "curl", "-f", "http://localhost:8000/docs"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3
  #     start_period: 20s

volumes:
  postgres_data:
    name: utm_postgres_data